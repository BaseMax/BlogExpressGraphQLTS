# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddTagTo {
  postId: String!
  tagId: String!
}

type AuthPayload {
  name: String!
  token: String!
}

type Comment {
  content: String!
  countOfLikes: Int!
  createdAt: DateTimeISO!
  id: String!
  likedUser: [String!]
  postId: String!
  repliedTo: String
  senderId: String!
}

input CreateCommentInput {
  content: String!
  postId: String!
  repliedTo: String
}

input CreatePostInput {
  content: String!
  title: String!
}

input CreateTagInput {
  tagName: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input LoginInput {
  email: String!
  password: String!
}

input MongoId {
  id: String!
}

type Mutation {
  addTagToPost(input: AddTagTo!): Post
  createComment(input: CreateCommentInput!): Comment!
  createPost(input: CreatePostInput!): Post!
  createTag(input: CreateTagInput!): Tag!
  deleteTag(input: MongoId!): Tag
  likePost(input: MongoId!): Post
  login(input: LoginInput!): AuthPayload!
  publishPost(input: MongoId!): Post
  removePost(id: String!): Post!
  signup(input: SignupInput!): AuthPayload!
  updatePost(input: UpdatePostInput!): Post!
}

type PopularTag {
  countOfUsed: Float!
  id: String!
  tagName: String!
}

type Post {
  authorId: String!
  content: String!
  countOfLikes: Int!
  createdAt: DateTimeISO!
  id: String!
  isPublished: Boolean!
  likedUsers: [String!]!
  tags: [String!]!
  title: String!
}

type Query {
  getAllPosts: [Post!]!
  getAuthPayload(token: String!): AuthPayload
  getAuthorPosts(input: MongoId!): [Post!]
  getHello: String!
  getPopularTags: PopularTag
  getPostById(input: MongoId!): Post
  getPostByTag(input: MongoId!): [Post!]
  search(input: SearchInput!): [Post!]
}

input SearchInput {
  keyword: String!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
}

type Tag {
  id: String!
  tagName: String!
}

input UpdatePostInput {
  content: String
  id: String!
  title: String
}